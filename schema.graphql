type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Exit @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  _amount: BigInt! # uint256
  _serieId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MentorAdded @entity(immutable: true) {
  id: Bytes!
  mentor: Bytes! # address
  project: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectBuilderAdded @entity(immutable: true) {
  id: Bytes!
  projectBuilder: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResiBuilderAdded @entity(immutable: true) {
  id: Bytes!
  resiBuilder: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResiBurnt @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResiMinted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResiRoleRemoved @entity(immutable: true) {
  id: Bytes!
  _role: Bytes! # bytes32
  _user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenInitialized @entity(immutable: true) {
  id: Bytes!
  treasury: Bytes! # address
  registry: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ResiRegistryInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectAdded @entity(immutable: true) {
  id: Bytes!
  _name: Bytes! # bytes32
  serieId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectDisabled @entity(immutable: true) {
  id: Bytes!
  _name: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistryInitialized @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResiTokenSet @entity(immutable: true) {
  id: Bytes!
  _resiToken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SerieClosed @entity(immutable: true) {
  id: Bytes!
  _id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SerieCreated @entity(immutable: true) {
  id: Bytes!
  _id: BigInt! # uint256
  _startDate: BigInt! # uint256
  _endDate: BigInt! # uint256
  _numberOfProjects: BigInt! # uint256
  _maxSupply: BigInt! # uint256
  _vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SerieSBTSet @entity(immutable: true) {
  id: Bytes!
  activeSerieId: BigInt! # uint256
  _sbt: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SerieSupplyUpdated @entity(immutable: true) {
  id: Bytes!
  oldSupply: BigInt! # uint256
  newSupply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryVaultSet @entity(immutable: true) {
  id: Bytes!
  _treasuryVault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawFromVault @entity(immutable: true) {
  id: Bytes!
  _serieId: BigInt! # uint256
  _amount: BigInt! # uint256
  _to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
